/* 
 * File:   application.c
 * Author: Ziad Elmekawy 
 *
 * Created on 25 August, 2024
 */

#include "application.h"
#include "ECU_Layer/LED/ecu_led.h"
#include "ECU_Layer/Ultrasonic_Sensor/ecu_ultrasonic_sensor.h"
#include "ECU_Layer/Char_LCD/ecu_char_lcd.h"
#include "ECU_Layer/Buzzer/ecu_buzzer.h"


// LED
led_t led_1 = 
{
    .port_name = PORTD_INDEX ,
    .pin = PIN6 ,
    .led_status = GPIO_LOW
};
// LCD 4-Bit
chr_lcd_4bit_t lcd_1 =
{ 
    .lcd_data[0].port  = PORTD_INDEX ,
    .lcd_data[0].pin = PIN0 ,
    .lcd_data[0].direction = GPIO_DIRECTION_OUTPUT ,
    .lcd_data[0].logic = GPIO_LOW ,
    
    .lcd_data[1].port  = PORTD_INDEX ,
    .lcd_data[1].pin = PIN1 ,
    .lcd_data[1].direction = GPIO_DIRECTION_OUTPUT ,
    .lcd_data[1].logic = GPIO_LOW ,
    
    .lcd_data[2].port  = PORTD_INDEX ,
    .lcd_data[2].pin = PIN2 ,
    .lcd_data[2].direction = GPIO_DIRECTION_OUTPUT ,
    .lcd_data[2].logic = GPIO_LOW ,
    
    .lcd_data[3].port  = PORTD_INDEX ,
    .lcd_data[3].pin = PIN3 ,
    .lcd_data[3].direction = GPIO_DIRECTION_OUTPUT ,
    .lcd_data[3].logic = GPIO_LOW ,
    
    .lcd_rs = PORTD_INDEX ,
    .lcd_rs.pin = PIN4 ,
    .lcd_rs.direction = GPIO_DIRECTION_OUTPUT ,
    .lcd_rs.logic = GPIO_LOW ,
    
    .lcd_en = PORTD_INDEX ,
    .lcd_en.pin = PIN5 ,
    .lcd_en.direction = GPIO_DIRECTION_OUTPUT ,
    .lcd_en.logic = GPIO_LOW 
};
// BUZZER
buz_t buz1 = 
{
    .port_name = PORTD_INDEX ,
    .pin = PIN7 ,
    .buz_status = GPIO_LOW
};
// Keypad
keypad_t Keypad_1 = 
{ 
    // Rows
    .keypad_row_pins[0].port = PORTC_INDEX ,
    .keypad_row_pins[0].pin = PIN0 ,
    .keypad_row_pins[0].direction = GPIO_DIRECTION_OUTPUT ,
    .keypad_row_pins[0].logic = GPIO_LOW , 
            
    .keypad_row_pins[1].port = PORTC_INDEX ,
    .keypad_row_pins[1].pin = PIN1 ,
    .keypad_row_pins[1].direction = GPIO_DIRECTION_OUTPUT ,
    .keypad_row_pins[1].logic = GPIO_LOW,
            
    .keypad_row_pins[2].port = PORTC_INDEX ,
    .keypad_row_pins[2].pin = PIN2 ,
    .keypad_row_pins[2].direction = GPIO_DIRECTION_OUTPUT ,
    .keypad_row_pins[2].logic = GPIO_LOW,
            
    .keypad_row_pins[3].port = PORTC_INDEX ,
    .keypad_row_pins[3].pin = PIN3 ,
    .keypad_row_pins[3].direction = GPIO_DIRECTION_OUTPUT ,
    .keypad_row_pins[3].logic = GPIO_LOW,
    
    // Columns 
    .keypad_column_pins[0].port = PORTC_INDEX ,
    .keypad_column_pins[0].pin = PIN4 ,
    .keypad_column_pins[0].direction =  GPIO_DIRECTION_INPUT,
    .keypad_column_pins[0].logic = GPIO_LOW , 
            
    .keypad_column_pins[1].port = PORTC_INDEX ,
    .keypad_column_pins[1].pin = PIN5 ,
    .keypad_column_pins[1].direction = GPIO_DIRECTION_INPUT ,
    .keypad_column_pins[1].logic = GPIO_LOW,
            
    .keypad_column_pins[2].port = PORTC_INDEX ,
    .keypad_column_pins[2].pin = PIN6 ,
    .keypad_column_pins[2].direction = GPIO_DIRECTION_INPUT ,
    .keypad_column_pins[2].logic = GPIO_LOW,
            
    .keypad_column_pins[3].port = PORTC_INDEX ,
    .keypad_column_pins[3].pin = PIN7 ,
    .keypad_column_pins[3].direction = GPIO_DIRECTION_INPUT ,
    .keypad_column_pins[3].logic = GPIO_LOW,
};
/******************* ^-^ Helper Function ^-^ *****************/
uint8 Check_Password_Validation (uint8 Arr[10] , uint8 Arr_Length );
void Restart_system (void);

/* ======= Global Variables ======= */
volatile uint8 KPD_Value = 0 ;
volatile uint8 KPD_opera = 0 ;
volatile uint8 Counter_Space =1 ;
volatile uint8 var1[10]  ;
volatile uint8 Counter_var1 =0 ;
volatile uint8 Division_temp  = 0 ;
volatile uint8 Minus_temp  = 0 ;
volatile uint8 ret_Number_String[1] = {0} ;
volatile uint8 Num_Of_Trying = 0 ;

static uint8 Valid_Password[7] = {1,2,3,4,5,6 };
/****************************** ^-^ Main Function Start ^-^ ***********************/
int main() 
{
    Std_ReturnType ret = E_NOK ;
    application_initialize();
    uint8 Display_counter =0 ;
    uint8 Check_ret_app =0 ;
    
    
    while(1)
    {
        if(Num_Of_Trying < 3)
        {
            ret = LCD_4bit_Send_String_Pos(&lcd_1 , "Enter Password : " , 1 , 1);
            ret = Keypad_get_value(&Keypad_1 , &KPD_Value);
            if (KPD_Value == '=')                               /* Check Password  validation */
            {
                   Check_ret_app = Check_Password_Validation (var1 , Counter_var1);
                   if(Check_ret_app  == 0 )
                   {
                       Restart_system();
                   }
                   else 
                   {
                        Num_Of_Trying =0 ;
                        ret = LCD_4bit_Send_Command(&lcd_1 , _LCD_CLEAR);
                        ret = LCD_4bit_Send_String_Pos(&lcd_1 , " Congratulation" , 1 , 1 );
                        ret = LCD_4bit_Send_String_Pos(&lcd_1 , "Valid Password" , 2 , 1 );
                        __delay_ms(1000);
                        ret = LCD_4bit_Send_Command(&lcd_1 , _LCD_CLEAR);
                       break; 
                   }
                   Num_Of_Trying++; 
                   KPD_Value  = '\0' ;
            }
            if (KPD_Value != '\0')
            {
                if ((KPD_Value==' ') ||(KPD_Value=='9') || (KPD_Value=='8') || (KPD_Value=='7') || (KPD_Value=='6') || (KPD_Value=='5') || (KPD_Value=='4') || (KPD_Value=='3') || (KPD_Value=='2') || (KPD_Value=='1') || (KPD_Value>='0'))
                {
                    var1[Counter_var1] = Keypad_Convert_from_char_to_int(KPD_Value);
                    ret = LCD_4bit_Send_Char_Data_Pos(&lcd_1 ,var1[Counter_var1] , 2 , Counter_Space);
                    __delay_ms(250);
                    ret = LCD_4bit_Send_Char_Data_Pos(&lcd_1 , '*' , 2 , Counter_Space);
                    Counter_Space++;
                    Counter_var1++;
                    KPD_Value  = '\0' ;
                }
                else if(KPD_Value == '/')                     /* For display Password  */
                {
                    Division_temp  = Counter_Space ;
                    Counter_Space = 1 ;
                    for(Display_counter =0 ; Display_counter<Counter_var1 ; Display_counter++)
                    {
                        ret = convert_uint8_to_string(var1[Display_counter] , ret_Number_String );
                        ret = LCD_4bit_Send_String_Pos(&lcd_1 ,ret_Number_String , 2 , (Counter_Space+Display_counter));
                    }
                    Counter_Space = Division_temp ;
                    KPD_Value  = '\0' ;
                }
                else if (KPD_Value == '-')                      /* For disapper Password  */
                {
                    Minus_temp  = Counter_Space ;
                    Counter_Space = 1 ;
                    for(Display_counter =0 ; Display_counter<=Counter_var1 ; Display_counter++)
                    {
                        ret = LCD_4bit_Send_Char_Data_Pos(&lcd_1 , '*' , 2 , Display_counter);
                    }
                    Counter_Space = Minus_temp ;
                    KPD_Value  = '\0' ;
                }
                else { /* Nothing */ }
            }
           else { /* Nothing */ }
        }
        else
        {
            ret = LCD_4bit_Send_Command(&lcd_1 , _LCD_CLEAR);
            ret = LCD_4bit_Send_String_Pos(&lcd_1 , " For Sorry ......" , 1 , 1 );
            ret = LCD_4bit_Send_String_Pos(&lcd_1 , "Your attempts are over" , 2 , 1 );
            ret = LCD_4bit_Send_String_Pos(&lcd_1 , "Restart application " , 4 , 5 );
            __delay_ms(2000);
        }
    }
    return (EXIT_SUCCESS);
}
/****************************** ^-^ Main Function End ^-^ ************************/
/******************* ^-^ application_initialize Function Start ^-^ ****************/
void application_initialize (void)
{
    Std_ReturnType ret = E_NOK ;
    ecu_layer_initialize();
    ret = LCD_4bit_Initialize(&lcd_1);
    ret = led_intialize(&led_1);
    ret = buz_intialize(&buz1);
    ret = Keypad_initialize(&Keypad_1);
            
}
/******************* ^-^ application_initialize Function End ^-^ *****************/
/******************* ^-^ Helper Function ^-^ *****************/
uint8 Check_Password_Validation (uint8 Arr[10] , uint8 Arr_Length )
{
    Std_ReturnType ret = E_NOK ;
    uint8 L_counter = 0 ;
    uint8 check_ret = 0 ;
    
    for (L_counter = 0 ; L_counter<=Arr_Length ; L_counter++)
    {
        if(Arr[L_counter] != Valid_Password[L_counter] )
        {
            check_ret = 0 ;
            ret = buz_turn_on(&buz1);
            __delay_ms(250);
            ret = buz_turn_off(&buz1);
            ret = led_turn_on(&led_1);
            __delay_ms(500);
            ret = buz_turn_off(&led_1);
            ret = LCD_4bit_Send_Command(&lcd_1 , _LCD_CLEAR);
            ret = LCD_4bit_Send_String_Pos(&lcd_1 , " Invalid Password" , 1 , 1 );
            ret = LCD_4bit_Send_String_Pos(&lcd_1 , "Please try again" , 2 , 1 );
            __delay_ms(1000);
            ret = LCD_4bit_Send_Command(&lcd_1 , _LCD_CLEAR);
            break ;
        }
        else
        {
            check_ret= 1 ;
        }
    }
    return check_ret;
}

void Restart_system (void)
{
    uint8 Restart_counter = 0 ;
    KPD_Value = 0 ;
    KPD_opera = 0 ;
    Counter_Space = 1 ;
    for (Restart_counter = 0 ; Restart_counter<10 ; Restart_counter++)
    {
        var1[Restart_counter] = 0 ;
    }
    Counter_var1 =0 ;
    Division_temp  = 0 ;
    Minus_temp  = 0 ;
    ret_Number_String[1] = 0 ;
}
